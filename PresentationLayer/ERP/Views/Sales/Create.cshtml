@model Domain.ViewModels.InvoiceCustomerViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>InvoiceCustomerViewModel</h4>
<hr />
<div class="row">
    <!-- Large modal -->


    <div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <partial name="_product" model="Model" />
            </div>
        </div>
    </div>

    <div>
        <a asp-action="Index">Back to List</a>
    </div>
    <div class="">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group col-md-4">
                <label asp-for="InvoiceId" class="control-label "></label>
                <input asp-for="InvoiceId" class="form-control " />
                <span asp-validation-for="InvoiceId" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="InvoiceDate" class="control-label "></label>
                <input asp-for="InvoiceDate" id="datepicker" type="text" class="form-control " value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                <span asp-validation-for="InvoiceDate" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4" >
                <label asp-for="InvoiceTotal" class="control-label "></label>
                <input asp-for="InvoiceTotal" class="form-control " />
                <span asp-validation-for="InvoiceTotal" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="InvoiceDiscount" class="control-label "></label>
                <input asp-for="InvoiceDiscount" class="form-control " />
                <span asp-validation-for="InvoiceDiscount" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="InvoiceNetTotal" class="control-label "></label>
                <input asp-for="InvoiceNetTotal" class="form-control " />
                <span asp-validation-for="InvoiceNetTotal" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="InvoiceType" class="control-label "></label>
                <input asp-for="InvoiceType" class="form-control " />
                <span asp-validation-for="InvoiceType" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="InvoicePaid" class="control-label "></label>
                <input asp-for="InvoicePaid" class="form-control " />
                <span asp-validation-for="InvoicePaid" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="InvoiceChange" class="control-label "></label>
                <input asp-for="InvoiceChange" class="form-control " />
                <span asp-validation-for="InvoiceChange" class="text-danger "></span>
            </div>
            <div class="form-group ">
                <label class="control-label">Customer Name</label>
                <select asp-for="CustId" class="form-control "
                        asp-items="@(new SelectList(Model.Customers,"Id","CustArName"))"></select>
                <span asp-validation-for="CustId" class="text-danger "></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="ProductId" class="control-label "></label>
                <input asp-for="ProductId" class="form-control " data-toggle="modal" data-target=".bd-example-modal-lg" />
                <span asp-validation-for="ProductId" class="text-danger "></span>
            </div>

                <header>
                    <h1>Invoice</h1>
                    <address contenteditable>
                    </address>

                </header>
                <article>
                    <h1>Recipient</h1>
                    <address contenteditable>
                        <p>Some Company<br>c/o Some Guy</p>
                    </address>
                    <table class="meta">
                        <tr>
                            <th><span contenteditable>Invoice #</span></th>
                            <td><span contenteditable>101138</span></td>
                        </tr>
                        <tr>
                            <th><span contenteditable>Date</span></th>
                            <td><span contenteditable>January 1, 2012</span></td>
                        </tr>
                        <tr>
                            <th><span contenteditable>Amount Due</span></th>
                            <td><span id="prefix" contenteditable>$</span><span>600.00</span></td>
                        </tr>
                    </table>
                    <table class="inventory">
                        <thead>
                            <tr>
                                <th><span contenteditable >Item</span></th>
                                <th><span contenteditable>Description</span></th>
                                <th><span contenteditable>Rate</span></th>
                                <th><span contenteditable>Quantity</span></th>
                                <th><span contenteditable>Price</span></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><a class="cut">-</a><span contenteditable asp-for="ProductId" data-toggle="modal" data-target=".bd-example-modal-lg"></span></td>
                                <td><span contenteditable>Experience Review</span></td>
                                <td><span data-prefix>$</span><span contenteditable>150.00</span></td>
                                <td><span contenteditable>4</span></td>
                                <td><span data-prefix>$</span><span>600.00</span></td>
                            </tr>
                        </tbody>
                    </table>
                    <a class="add">+</a>
                    <table class="balance">
                        <tr>
                            <th><span contenteditable>Total</span></th>
                            <td><span data-prefix>$</span><span>600.00</span></td>
                        </tr>
                        <tr>
                            <th><span contenteditable>Amount Paid</span></th>
                            <td><span data-prefix>$</span><span contenteditable>0.00</span></td>
                        </tr>
                        <tr>
                            <th><span contenteditable>Balance Due</span></th>
                            <td><span data-prefix>$</span><span>600.00</span></td>
                        </tr>
                    </table>
                </article>
                <aside>
                    <h1><span contenteditable>Additional Notes</span></h1>
                    <div contenteditable>
                        <p>A finance charge of 1.5% will be made on unpaid balances after 30 days.</p>
                    </div>
                </aside>



        <div class="form-group ">
            <input type="submit" value="Create" class="btn btn-primary " />
        </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script>
        $(function () {
            $("#datepicker").datepicker();
        });

        /* Prototyping
        /* ========================================================================== */

        (function (window, ElementPrototype, ArrayPrototype, polyfill) {
            function NodeList() { [polyfill] }
            NodeList.prototype.length = ArrayPrototype.length;

            ElementPrototype.matchesSelector = ElementPrototype.matchesSelector ||
                ElementPrototype.mozMatchesSelector ||
                ElementPrototype.msMatchesSelector ||
                ElementPrototype.oMatchesSelector ||
                ElementPrototype.webkitMatchesSelector ||
                function matchesSelector(selector) {
                    return ArrayPrototype.indexOf.call(this.parentNode.querySelectorAll(selector), this) > -1;
                };

            ElementPrototype.ancestorQuerySelectorAll = ElementPrototype.ancestorQuerySelectorAll ||
                ElementPrototype.mozAncestorQuerySelectorAll ||
                ElementPrototype.msAncestorQuerySelectorAll ||
                ElementPrototype.oAncestorQuerySelectorAll ||
                ElementPrototype.webkitAncestorQuerySelectorAll ||
                function ancestorQuerySelectorAll(selector) {
                    for (var cite = this, newNodeList = new NodeList; cite = cite.parentElement;) {
                        if (cite.matchesSelector(selector)) ArrayPrototype.push.call(newNodeList, cite);
                    }

                    return newNodeList;
                };

            ElementPrototype.ancestorQuerySelector = ElementPrototype.ancestorQuerySelector ||
                ElementPrototype.mozAncestorQuerySelector ||
                ElementPrototype.msAncestorQuerySelector ||
                ElementPrototype.oAncestorQuerySelector ||
                ElementPrototype.webkitAncestorQuerySelector ||
                function ancestorQuerySelector(selector) {
                    return this.ancestorQuerySelectorAll(selector)[0] || null;
                };
        })(this, Element.prototype, Array.prototype);

        /* Helper Functions
        /* ========================================================================== */

        function generateTableRow() {
            var emptyColumn = document.createElement('tr');

            emptyColumn.innerHTML = '<td><a class="cut">-</a><span contenteditable></span></td>' +
                '<td><span contenteditable></span></td>' +
                '<td><span data-prefix>$</span><span contenteditable>0.00</span></td>' +
                '<td><span contenteditable>0</span></td>' +
                '<td><span data-prefix>$</span><span>0.00</span></td>';

            return emptyColumn;
        }

        function parseFloatHTML(element) {
            return parseFloat(element.innerHTML.replace(/[^\d\.\-]+/g, '')) || 0;
        }

        function parsePrice(number) {
            return number.toFixed(2).replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1,');
        }

        /* Update Number
        /* ========================================================================== */

        function updateNumber(e) {
            var
                activeElement = document.activeElement,
                value = parseFloat(activeElement.innerHTML),
                wasPrice = activeElement.innerHTML == parsePrice(parseFloatHTML(activeElement));

            if (!isNaN(value) && (e.keyCode == 38 || e.keyCode == 40 || e.wheelDeltaY)) {
                e.preventDefault();

                value += e.keyCode == 38 ? 1 : e.keyCode == 40 ? -1 : Math.round(e.wheelDelta * 0.05);
                value = Math.max(value, 0);

                activeElement.innerHTML = wasPrice ? parsePrice(value) : value;
            }

            updateInvoice();
        }

        /* Update Invoice
        /* ========================================================================== */

        function updateInvoice() {
            var total = 0;
            var cells, price, total, a, i;

            // update inventory cells
            // ======================

            for (var a = document.querySelectorAll('table.inventory tbody tr'), i = 0; a[i]; ++i) {
                // get inventory row cells
                cells = a[i].querySelectorAll('span:last-child');

                // set price as cell[2] * cell[3]
                price = parseFloatHTML(cells[2]) * parseFloatHTML(cells[3]);

                // add price to total
                total += price;

                // set row total
                cells[4].innerHTML = price;
            }

            // update balance cells
            // ====================

            // get balance cells
            cells = document.querySelectorAll('table.balance td:last-child span:last-child');

            // set total
            cells[0].innerHTML = total;

            // set balance and meta balance
            cells[2].innerHTML = document.querySelector('table.meta tr:last-child td:last-child span:last-child').innerHTML = parsePrice(total - parseFloatHTML(cells[1]));

            // update prefix formatting
            // ========================

            var prefix = document.querySelector('#prefix').innerHTML;
            for (a = document.querySelectorAll('[data-prefix]'), i = 0; a[i]; ++i) a[i].innerHTML = prefix;

            // update price formatting
            // =======================

            for (a = document.querySelectorAll('span[data-prefix] + span'), i = 0; a[i]; ++i) if (document.activeElement != a[i]) a[i].innerHTML = parsePrice(parseFloatHTML(a[i]));
        }

        /* On Content Load
        /* ========================================================================== */

        function onContentLoad() {
            updateInvoice();

            var
                input = document.querySelector('input'),
                image = document.querySelector('img');

            function onClick(e) {
                var element = e.target.querySelector('[contenteditable]'), row;

                element && e.target != document.documentElement && e.target != document.body && element.focus();

                if (e.target.matchesSelector('.add')) {
                    document.querySelector('table.inventory tbody').appendChild(generateTableRow());
                }
                else if (e.target.className == 'cut') {
                    row = e.target.ancestorQuerySelector('tr');

                    row.parentNode.removeChild(row);
                }

                updateInvoice();
            }

            function onEnterCancel(e) {
                e.preventDefault();

                image.classList.add('hover');
            }

            function onLeaveCancel(e) {
                e.preventDefault();

                image.classList.remove('hover');
            }

            function onFileInput(e) {
                image.classList.remove('hover');

                var
                    reader = new FileReader(),
                    files = e.dataTransfer ? e.dataTransfer.files : e.target.files,
                    i = 0;

                reader.onload = onFileLoad;

                while (files[i]) reader.readAsDataURL(files[i++]);
            }

            function onFileLoad(e) {
                var data = e.target.result;

                image.src = data;
            }

            if (window.addEventListener) {
                document.addEventListener('click', onClick);

                document.addEventListener('mousewheel', updateNumber);
                document.addEventListener('keydown', updateNumber);

                document.addEventListener('keydown', updateInvoice);
                document.addEventListener('keyup', updateInvoice);

                input.addEventListener('focus', onEnterCancel);
                input.addEventListener('mouseover', onEnterCancel);
                input.addEventListener('dragover', onEnterCancel);
                input.addEventListener('dragenter', onEnterCancel);

                input.addEventListener('blur', onLeaveCancel);
                input.addEventListener('dragleave', onLeaveCancel);
                input.addEventListener('mouseout', onLeaveCancel);

                input.addEventListener('drop', onFileInput);
                input.addEventListener('change', onFileInput);
            }
        }

        window.addEventListener && document.addEventListener('DOMContentLoaded', onContentLoad);

    </script>
}
